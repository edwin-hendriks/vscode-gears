{
	"new process": {
		"prefix": "process: RESULTS",
		"body": [
			"process '${1:process_name}' with subject #('${2:subject_title}': ${3:subject_element}) startable by ${4:batch_starter_actor}",
			"",
			"description '${5:description}'",
			"",
			"/********** GLOBAL RESULTS **********/",
			"",
			"results in:",
			"\t$0",
			"",
			"/********** DETAILS PER RESULT **********/",
			""
		],
		"description": "Basic snippet for creating a new process end result specification. The 'with subject' and 'startable by' are optional. The 'with subject' is only usefull if the process has more than one yellow (interactive) process step. The 'startable by' is only usefull for fully automated processes."
	},
	"one created": {
		"prefix": "one: ELEMENT",
		"body": [
			"one ${1:element_name} in ${2:collection_name} is created with:",
			"\t${3:attribute_name}\t= ${4:value_expression}",
			"\t$0"
		],
		"description": "Creates one element and returns it."
	},
	"one MAIL created": {
		"prefix": "mail: ELEMENT",
		"body": [
			"one ${1:MAIL_NAME} in MAILS is created with:",
			"\tfrom_address\t= ${2:from_expression}",
			"\tto_address\t= ${3:to_expression}",
			"\ttitle\t= ${4:title_expression}",
			"\tbody\t= ${5:body_expression}",
			"\t$0"
		],
		"description": "Creates an email message."
	},
	"one MESSAGE created": {
		"prefix": "message: ELEMENT",
		"body": [
			"one ${1:MESSAGE_NAME} in MESSAGES is created with:",
			"\tfrom_user\t= ${2:from_expression}",
			"\tto_user\t= ${3:to_expression}",
			"\ttitle\t= ${4:title_expression}",
			"\tbody\t= ${5:body_expression}",
			"\t$0"
		],
		"description": "Creates an internal message."
	},
	"multiple created": {
		"prefix": "multiple: COLLECTION",
		"body": [
			"multiple ${1:element_name} exist in ${2:collection_name} with:",
			"\t${3:attribute_name}\t= ${4:value_expression}",
			"\t$0"
		],
		"description": "Creates several elements in a collection and return a collection of elements created."
	},
	"for the": {
		"prefix": "for the",
		"body": [
			"for the ${1:element_name} in ${2:filtered_collection} applies:",
			"${1:element_name}.${3:attribute_name}\t= ${4:value_expression}",
			"\tand",
			"$0"
		],
		"description": "Achieve one or more results for one element. Any result is seperated by 'and' ."
	},
	"for each": {
		"prefix": "for each: LIST or results",
		"body": [
			"for each ${1:element_name} in ${2:numerous:numerous} :${3:filtered_collection} applies:",
			"${1:element_name}.${4:attribute_name}\t= ${5:value_expression}",
			"\tand",
			"$0"
		],
		"description": "Achieve one or more results for multiple elements. Any result is seperated by 'and'. Add 'numerous' only if you need to process a lot of elements (e.g. more then 1000). You can leave out 'applies'. If so this For each will result in a list value.  (since before GEARS v4.3.0)"
	},
	"if then {else}": {
		"prefix": "if",
		"body": [
			"if ${1:condition} then ${2:true_expression_or_result} else ${3:false_expression_or_result}$0"
		],
		"description": "If then else which can produce both a conditional expression (a value) or a conditional result. The 'else' part is optional. If ommitted there will be either an empty value or no result."
	},
	"input from": {
		"prefix": "input",
		"body":	["input from ${1:ACTOR_NAME_OR_USER}"
		],
		"description": "Input from defines a value is coming as input from an actor or a user."
	},
	"input from (all options)": {
		"prefix": "input",
		"body":	["input from ${1:ACTOR_NAME_OR_USER}"
				,"based on ${2:BASED_ON_EXPRESSION}"
				,"chosen from ${3:CHOSEN_FROM_EXPRESSION}"
				,"default ${4:DEFAULT_EXPRESSION}"
				,"of type ${5:TYPE}"
		],
		"description": "Input from defines a value is coming as input from an actor or a user. Based on defines the info the actor or user needs to give his input. Chosen from defines from what values the actor or user can choose from. Default defines what the default value is. Of type defines the type (only needed when the type cannot be determined otherwise."
	},
	"entity definition": {
		"prefix": "entity",
		"body":	["${1:ENTITY_NAME} in $1S"
				,"description '${2:DESCRIPTION}' ="
				,"\t$0"
		],
		"description": "Defines an entity by providing its singular name, its plural name and its attributes. \n\n Use snippet: 'attribute definition' to provide attributes."
	},
	"attribute definition": {
		"prefix": "attribute",
		"body":	["${1:ATTRIBUTE_NAME}\t: ${2|text,number,boolean,date,time,datetime,period,tuple,binary,ENUMERATION,RELATED_ENTITY_NAME,multiple RELATED_ENTITY_NAME|}"
		],
		"description": "Define an attribute by providing its name, then choose the type of the attribute. You can override the default length of a text attribute by adding (n) after type 'text'. E.g. text(10). You can override the default length and precision by adding (n,m) after number. E.g. number(4,2) for a number of length 4 incl. decimals and 2 decimals. ENUMERATION should be replaced with a comma separated list of possible values between brackets (e.g. ['male', 'female', 'unknown']).  RELATED_ENTITY_NAME should be replaced with the name of an existing related entity. \n\n Use snippet: 'trait' to define traits of each attribute."
	},
	"attribute trait": {
		"prefix": "trait",
		"body":	["${1|unique simpleStringLiteral,required,optional,autovalue,displayed,multiline,action,default valueExpression,labeled simpleStringLiteral,group simpleStringLiteral,opposite of attributeName,description descriptionLiteral|}"
		],
		"description": "Choose the trait you want: \n\n The 'unique' trait forces the value of this attribute to be unique. If the optional simpleStringLiteral is provided, the combination of the attribute values that share the same simpleLiteral must be unique. \n\n Use either the 'required' trait or its reverse, being the 'optional' trait. If neither is provided 'optional' is assumed as default. The 'required' trait forces that the value of this attribute is provides when stored. \n\n  The 'autovalue' will make sure an automatically generated value will be generated for this attribute on storage. \n\n  The 'displayed' trait makes the value of this attribute the default way to represent this entity. A maximum of 2 attributes can have this trait one of a basic type and another of a tuple type. \n\n  The 'multiline' trait defines that a textual attribute can have multiple lines. \n\n  The 'action' trait defines that this attribute represents an action that should be performed before the process flow can continue. \n\n  The 'default' trait defines the default value of this attribute as specified with the valueExpression that comes right after 'default'. \n\n  The 'labeled' trait overrides the default label with the specified simpleStringLiteral when a label is needed for this attribute in a user interface. \n\n  The 'group' trait specifies a group with the provided simpleStringLiteral in which this attribute is placed. \n\n  The 'opposite of' trait defines the opposite relational attributeName. It makes these 2 attributes act as one relation. \n\n  With the 'description' trait you can give a description to this attribute as specified with the descriptionLiteral."
	},
	"addWorkDays": {
		"prefix": "addWorkDays: date",
		"body": "addWorkDays(${1:startdate}, ${2:number_of_workdays})$0",
		"description": "E.g. addWorkDays(date('2017-03-21'), 5) == date('2017-03-28'). Results in a date value which is startdate + number_of_workdays as workdays."
	},
	"asMillis": {
		"prefix": "asMillis: integer",
		"body": "asMillis(${1:date_or_timestamp})$0",
		"description": "Results in the number of milliseconds since 1970-01-01 up to the date_or_timestamp."
	},
	"capitalize": {
		"prefix": "capitalize: text",
		"body": "capitalize(${1:t})$0",
		"description": "Transforms the first letter of t in capital case."
	},
	"concat": {
		"prefix": "concat: text",
		"body": "concat(${1:list_with_text_values})$0",
		"description": "E.g. concat(['A', 'B', 'C']) will result in 'ABC'. Concats all text values in list_with_text_values."
	},
	"count": {
		"prefix": "count: integer",
		"body": "count(${1:collection_or_list})$0",
		"description": "The number of elements in the collection_or_list."
	},
	"currentDate": {
		"prefix": "now: date",
		"body": "now()$0",
		"description": "Returns the current date and or time of the computer the software is running on."
	},
	"date": {
		"prefix": "date: date",
		"body": "date(${1:text_value})$0",
		"description": "E.g. date('2016-12-31') returns its equivalent date value. Returns a date value from the text_value with format dd-MM-yyyy."
	},
	"datePart": {
		"prefix": "datePart: date",
		"body": "datePart(${1:timestamp_value})$0",
		"description": "Returns the date part of the timestamp_value"
	},
	"day": {
		"prefix": "day: integer",
		"body": "day(${1:date_or_timestamp_value})$0",
		"description": "E.g. day(date('2016-12-31')) returns 31. Returns the day of the month of the date_or_timestamp_value. "
	},
	"days": {
		"prefix": "days: integer",
		"body": "days(${1:period_value})$0",
		"description": "E.g. days(date('2017-1-1') - date('2016-12-31')) results in 1. Results the number of whole days of a period value.  "
	},
	"findInText": {
		"prefix": "findInText: integer",
		"body": "findInText(${1:text_value}, ${2:regex})$0",
		"description": "E.g. findInText('AB 1234 CD', '[0-9]') results in 3. Results in an integer value which is first position in the text_value that matched the textual regular expression value regex (see http://regexr.com/ for more info). A match with the first character is 0 and no match results in -1."
	},
	"first": {
		"prefix": "first: ELEMENT",
		"body": "first(${1:collection}, ${2:error_message})$0",
		"description": "E.g. first([1, 2, 3], 'some error message') results in 1. Results in the first element of a collection."
	},
	"format": {
		"prefix": "format: text",
		"body": "format(${1:date_time_timestamp_num_value}, ${2:format_pattern})$0",
		"description": "E.g. format(12.34, '#.#') == '12.34' and format(12.34, '#.#', 'nl') == '12,34' and format(.2, '0.00', 'nl') == '0,20' and format(currentTimestamp(), 'EEEE dd MMMM YYYY HH:mm') == 'Friday 25 March 2016 13:56'. Results in a formatted text of the date_time_timestamp_num_value using the format_pattern. See https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html and http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html for more info on possible formats. "
	},
	"get": {
		"prefix": "get: ELEMENT",
		"body": "get(${1:collection_or_list}, ${2:N}, ${3:error_message})$0",
		"description": "Returns the N-th element from the collection_or_list or the error_message. The parameter error_message is optional. If ommitted a standard error message will be used."
	},
	"getCollection": {
		"prefix": "getCollection: ELEMENT",
		"body": "getCollection(${1:collection_or_list}, ${2:N}, ${3:M}, ${3:error_message})$0",
		"description": "Returns a collection containing elements N up and including M or throws the error_message. The parameter error_message is optional. If ommitted a standard error message will be used."
	},
	"getInstanceId": {
		"prefix": "getInstanceId: text",
		"body": "getInstanceId()$0",
		"description": "Returns the identifier of the current process instance."
	},
	"integer": {
		"prefix": "integer: integer",
		"body": "integer(${1:text_value})$0",
		"description": "E.g. integer('8') == 8. Returns the integer value of the text_value."
	},
	"decimal": {
		"prefix": "decimal: decimal",
		"body": "decimal(${1:text_value})$0",
		"description": "E.g. decimal('8.123') == 8.123. Or decimal('1,23E+03') == 1230. Returns the decimal value of the text_value. Also support exponent (E+) notation."
	},
	"e": {
		"prefix": "e: decimal",
		"body": "e()$0",
		"description": "Returns 2.7182818284 (the number e) with 10 decimal precsion."
	},
	"length": {
		"prefix": "length: integer",
		"body": "length(${1:text_value})$0",
		"description": "E.g. length('Hi there') == 8. Returns an integer value which is the number of charachters in the text_value."
	},
	"lowercase": {
		"prefix": "lowercase: text",
		"body": "lowercase(${1:text_value})$0",
		"description": "E.g. lowercase('Hi There') == 'hi there'. Returns text_value but all in lowercase letters. "
	},
	"max": {
		"prefix": "max: any comparable value",
		"body": "max(${1:collection})$0",
		"description": "E.g. max([1,2,3]) == 3. Returns the maximum value of a list of values."
	},
	"min": {
		"prefix": "min: any comparable value",
		"body": "min(${1:collection})$0",
		"description": "E.g. min([1,2,3]) == 1. Returns the minimum value of a list of values."
	},
	"month": {
		"prefix": "month: integer",
		"body": "month(${1:date_or_timestamp_value})$0",
		"description": "E.g. month(date('2016-12-31')) == 12. Returns the month of the date_or_timestamp_value. "
	},
	"months": {
		"prefix": "months: integer",
		"body": "months(${1:period_value})$0",
		"description": "E.g. months(date('2017-1-1') - date('2016-01-01')) == 12. Results in the number of whole months of a period value. "
	},
	"period": {
		"prefix": "period: period",
		"body": "period(${1:text_value})$0",
		"description": "E.g. period('1 year 3 weeks 1 day 250 milliseconds') returns its equivalent period value. Returns a period value from the text_value. The text_value needs to be in the period format which is digits followed by period units being year, month, week, day, hour, minute, second, millisecond or its plural forms. "
	},
	"pi": {
		"prefix": "pi: decimal",
		"body": "pi()$0",
		"description": "Returns 3.1415926535 (the number pi) with 10 decimal precsion."
	},
	"quarter": {
		"prefix": "quarter: integer",
		"body": "quarter(${1:date_or_timestamp_value})$0",
		"description": "E.g. quarter(date('2016-12-31')) == 4. Returns an integer value which is the quarter of the date_or_timestamp_value. "
	},
	"regex_replace": {
		"prefix": "replace: text",
		"body": "replace(${1:text_value}, ${2:search_text}, ${3:replacement_text})$0",
		"description": "E.g. regex_replace('This 1 text has 29 characters', ' [0-9]+', '') == 'This text has characters'. As the replace function but the search_text is now a regular expression (see http://regexr.com/ for info on regular expressions)."
	},
	"replace": {
		"prefix": "replace: text",
		"body": "replace(${1:text_value}, ${2:search_text}, ${3:replacement_text})$0",
		"description": "E.g. replace('To be or not to be', 'be', 'think') == 'To think or not to think'. Returns the text_value, but all parts in it that match search_text will be replaced with replacement_text."
	},
	"round": {
		"prefix": "round: decimal",
		"body": "roundDown(${1:decimal_value}, ${2:scale})$0",
		"description": "E.g. round(1.945, 1) == 1.9. Returns the decimal_value, but rounded to the scale number of decimal digits. The 'normal' round half-up method is used. See https://en.wikipedia.org/wiki/Rounding#Round_half_up."
	},
	"roundDown": {
		"prefix": "roundDown: decimal",
		"body": "roundDown(${1:decimal_value}, ${2:scale})$0",
		"description": "E.g. roundDown(1.99, 1) == 1.9. Returns the decimal_value, but rounded down to the scale number of decimal digits."
	},
	"separatedBy": {
		"prefix": "separatedBy: text",
		"body": "separatedBy(${1:list_of_textual_values}, ${2:seperator})$0",
		"description": "E.g. separatedBy(['Apple', 'Banana', 'Citron'], ' is not a ') == 'Apple is not a Banana is not a Citron'. Returns the concatenation of the textual values in list_of_textual_values but seperated with seperator."
	},
	"sorted": {
		"prefix": "sorted: COLLECTION",
		"body": "sorted(${1:collection}, ${2:sort_directive})$0",
		"description": "E.g. sorted(PERSONS, 'birthDate ascending lastName descending') returns PERSONS but sorted ascending on table attribute birthDate and then descending on table attribute lastName. Note that the table attribute is used. Not the logical entity/collection attribute."
	},
	"split": {
		"prefix": "split: list of textual values",
		"body": "split(${1:text_value}, ${2:seperator})$0",
		"description": "E.g. split('Hello World!', ' ') == ['Hello', 'World!']. Returns a list of textual values which is the text_value splitted up using the textual seperator value."
	},
	"substring": {
		"prefix": "substring: text",
		"body": "substring(${1:text_value}, ${2:N}, ${3:M})$0",
		"description": "E.g. substring('Hello World!', 7, 11) == 'World'. Returns a textual value which is the N-th character until and including the M-th character of text_value."
	},
	"sum": {
		"prefix": "sum: integer or decimal or float",
		"body": "sum(${1:list_of_numeric_values})$0",
		"description": "E.g. sum(1, 2, 3) = 6. Returns the sum of the values in list_of_numeric_values. All values in the list should be either integer, or decimal or float."
	},
	"time": {
		"prefix": "time: time",
		"body": "time(${1:text_value})$0",
		"description": "E.g. time('23:59:00') returns its equivalent time value. Returns a time value from the text_value which is in format HH:mm:ss."
	},
	"timePart": {
		"prefix": "timePart: time",
		"body": "timePart(${1:timestamp_value})$0",
		"description": "Return a time value which is the time part of the timestamp_value"
	},
	"timestamp": {
		"prefix": "timestamp: timestamp",
		"body": "timestamp(${1:text_value})$0",
		"description": "E.g. time('31-12-2016 23:59:00') returns its equivalent timestamp value. Returns a timestamp value from the text_value which needs to be in format dd-MM-yyyy HH:mm:ss."
	},
	"toHtml": {
		"prefix": "toHtml: text rendered as HTML",
		"body": "toHtml(${1:text_value})$0",
		"description": "Returns the text_value but will be rendered as HTML when displayed in a browser."
	},
	"uppercase": {
		"prefix": "uppercase: text",
		"body": "uppercase(${1:text_value})$0",
		"description": "E.g. uppercase('This is huge!') == 'THIS IS HUGE!'. Returns text_value but all in uppercase letters. "
	},
	"uniqueId": {
		"prefix": "uniqueId: text",
		"body": "uniqueId()$0",
		"description": "Returns a global unique identifier."
	},
	"year": {
		"prefix": "year: integer",
		"body": "year(${1:date_or_timestamp_value})$0",
		"description": "E.g. year(date('2016-12-31')) == 2016. Returns the year of the date_or_timestamp_value. "
	},
	"years": {
		"prefix": "years: integer",
		"body": "years(${1:period_value})$0",
		"description": "E.g. months(date('2017-1-1') - date('2016-01-01')) == 1. Results in the number of whole years of a period value. "
	},
	"Definition in place": {
		"prefix": "def: DEFINITION",
		"body": [ "\"${1:def_title}\""
				, ""
				, "\"$1\" ="
				, "\t$0"
		],
		"description": "Start a definition at cursor position as well as it's specification in a line below."
	},
	"To definition": {
		"prefix": "todef: SELECTED_TEXT to DEFINITION",
		"body": [ "\"${1:def_title}\""
				, ""
				, "\"$1\" ="
				, "\t$TM_SELECTED_TEXT"
		],
		"description": "Turns selected text into an definition."
	}
}